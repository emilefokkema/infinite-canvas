// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`an infinite canvas context > that alters its state and draws a rectangle > and then clears a rectangle containing the drawing > should have cleared a rectangle and nothing else 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
]
`;

exports[`an infinite canvas context > that alters its state and draws a rectangle > should have called the context methods 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.fillStyle = "#00f"",
  "context.lineWidth = 1",
  "context.strokeStyle = "#f00"",
  "context.beginPath()",
  "context.moveTo(1,1)",
  "context.lineTo(2,1)",
  "context.lineTo(2,2)",
  "context.lineTo(1,2)",
  "context.closePath()",
  "context.moveTo(1,1)",
  "context.fill()",
]
`;

exports[`an infinite canvas context > that begins path > and then builds it and fills it > and then clears a smaller area than the one that was closed and adds another instruction > and then clears an area containing all previous instructions > and then draws something else > should have cleared a rectangle once more 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.lineWidth = 1",
  "context.strokeStyle = "#f00"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(1,0)",
  "context.lineTo(1,1)",
  "context.lineTo(0,1)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.fill()",
]
`;

exports[`an infinite canvas context > that begins path > and then builds it and fills it > and then clears a smaller area than the one that was closed and adds another instruction > and then clears an area containing all previous instructions > should have cleared a rectangle once 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
]
`;

exports[`an infinite canvas context > that begins path > and then builds it and fills it > and then clears a smaller area than the one that was closed and adds another instruction > should still have executed the instructions in the completed area and should have added a clear rect instruction 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(0,3)",
  "context.closePath()",
  "context.lineWidth = 1",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(0,0,2,2)",
  "context.restore()",
  "context.strokeStyle = "#f00"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(2,0)",
  "context.stroke()",
]
`;

exports[`an infinite canvas context > that begins path > and then builds it and fills it > and then clears an area that is outside the drawn area > should not have done anything 1`] = `[]`;

exports[`an infinite canvas context > that begins path > and then builds it and fills it > should have executed the new instructions 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(0,3)",
  "context.closePath()",
  "context.lineWidth = 1",
  "context.fill()",
]
`;

exports[`an infinite canvas context > that begins path > and then changes state and fills a rect > and then adds a rect to the path and fills it > should do that using the same changed state 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.fillStyle = "#f00"",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(2,0)",
  "context.lineTo(2,2)",
  "context.lineTo(0,2)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.fill()",
  "context.fillStyle = "#000"",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.fillStyle = "#f00"",
  "context.moveTo(0,2)",
  "context.lineTo(2,2)",
  "context.lineTo(2,4)",
  "context.lineTo(0,4)",
  "context.closePath()",
  "context.moveTo(0,2)",
  "context.lineWidth = 1",
  "context.fill()",
]
`;

exports[`an infinite canvas context > that begins path > and then changes state and fills a rect > should have remembered the state change 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.fillStyle = "#f00"",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(2,0)",
  "context.lineTo(2,2)",
  "context.lineTo(0,2)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.fill()",
]
`;

exports[`an infinite canvas context > that begins path > and then changes state, begins a new path and fills it > should have remembered the state change 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.fillStyle = "#f00"",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(2,0)",
  "context.lineTo(2,2)",
  "context.lineTo(0,2)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.lineWidth = 1",
  "context.fill()",
]
`;

exports[`an infinite canvas context > that draws a triangular path and then clears a rect outside the triangle > should not have added a clearRect 1`] = `[]`;

exports[`an infinite canvas context > that fills a rect and adds a clearRect that partially covers it > and then adds a clearRect with negative width and height that covers the previous clearRect entirely > should end up with only one clearRect 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(50,50)",
  "context.lineTo(100,50)",
  "context.lineTo(100,100)",
  "context.lineTo(50,100)",
  "context.closePath()",
  "context.moveTo(50,50)",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(75,75,-50,-50)",
  "context.restore()",
]
`;

exports[`an infinite canvas context > that fills a rectangle, clears part of it and then clears a bigger part of it > should end up with only one clear rect instruction 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(5,0)",
  "context.lineTo(5,5)",
  "context.lineTo(0,5)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(1,1,3,3)",
  "context.restore()",
]
`;

exports[`an infinite canvas context > that fills a rectangle, fills a smaller rectangle inside it and clears a rectangle containing the small one but not the big one > should forget all about the second rectangle 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(0,0)",
  "context.lineTo(5,0)",
  "context.lineTo(5,5)",
  "context.lineTo(0,5)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.fill()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(1,1,3,3)",
  "context.restore()",
]
`;

exports[`an infinite canvas context > that makes a path with zero area and strokes it > and then clears an area overlapping but not covering the path > should have added a clearRect 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.beginPath()",
  "context.moveTo(20,20)",
  "context.lineTo(30,30)",
  "context.lineWidth = 1",
  "context.stroke()",
  "context.save()",
  "context.transform(1,0,0,1,0,0)",
  "context.clearRect(25,25,30,30)",
  "context.restore()",
]
`;

exports[`an infinite canvas context > that makes a path, fills a rect, fills the path, begins a new path and then clears a rect containing the first drawn path > should forget the first drawn path 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.clearRect(0,0,200,200)",
  "context.lineWidth = 1",
  "context.beginPath()",
  "context.moveTo(3,3)",
  "context.lineTo(4,3)",
  "context.lineTo(4,4)",
  "context.lineTo(3,4)",
  "context.closePath()",
  "context.moveTo(3,3)",
  "context.fill()",
]
`;
