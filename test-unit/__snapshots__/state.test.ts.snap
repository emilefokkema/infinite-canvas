// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`a default state > that changes and saves > and is then converted to another that also changed and saved > should have created intructions to restore, change and save 1`] = `
[
  "context.restore()",
  "context.fillStyle = \\"#00f\\"",
  "context.save()",
]
`;

exports[`a default state > that changes and saves > and is then converted to another that changed, saved and then changed again > should have created intructions to restore, change, save and change again 1`] = `
[
  "context.restore()",
  "context.fillStyle = \\"#00f\\"",
  "context.save()",
  "context.fillStyle = \\"#ff0\\"",
]
`;

exports[`a default state > that changes and saves > and then changes in two different ways > and then one way is converted to the other way > should result in instructions that change the state, but no restoring 1`] = `
[
  "context.fillStyle = \\"#00f\\"",
  "context.strokeStyle = \\"#000\\"",
]
`;

exports[`a default state > that is changed to a non-default state that differs on some fields but not all > should have created an instruction that sets the fields that differ 1`] = `
[
  "context.setLineDash([1,2])",
  "context.lineWidth = 2",
  "context.strokeStyle = \\"#f00\\"",
  "context.setTransform(2,0,0,2,0,0)",
  "context.font = \\"12px sans-serif\\"",
]
`;

exports[`a default state > that sets the fill style > and then sets it again on the new state > should not have created an instruction 1`] = `[]`;

exports[`a default state > that sets the fill style > should have created an instruction 1`] = `
[
  "context.fillStyle = \\"#f00\\"",
]
`;

exports[`a state with a clipped path > and another one with another clipped path that is based on the same path > when the one with one clipped path is converted (including clipped paths) to the one with another clipped path > should result in the right instructions 1`] = `
[
  "context.fillStyle = \\"#000\\"",
  "context.beginPath()",
  "context.fillStyle = \\"#f00\\"",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(3,3)",
  "context.lineTo(0,3)",
  "context.lineTo(0,0)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.clip()",
  "context.moveTo(0,0)",
  "context.clip()",
]
`;

exports[`a state with a clipped path > and another one with, higher up its stack, another clipped path that is based on the same path > and the other one saves once more and changes state > should result in the right changes 1`] = `
[
  "context.save()",
  "context.restore()",
  "context.fillStyle = \\"#000\\"",
  "context.beginPath()",
  "context.fillStyle = \\"#f00\\"",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(3,3)",
  "context.lineTo(0,3)",
  "context.lineTo(0,0)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.clip()",
  "context.save()",
  "context.moveTo(0,0)",
  "context.clip()",
  "context.save()",
  "context.fillStyle = \\"#ff0\\"",
]
`;

exports[`a state with a clipped path > and another one with, higher up its stack, another clipped path that is based on the same path > when the one with one clipped path is converted (including clipped paths) to the one with another clipped path > should result in the right instructions 1`] = `
[
  "context.save()",
  "context.restore()",
  "context.fillStyle = \\"#000\\"",
  "context.beginPath()",
  "context.fillStyle = \\"#f00\\"",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(3,3)",
  "context.lineTo(0,3)",
  "context.lineTo(0,0)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.clip()",
  "context.save()",
  "context.moveTo(0,0)",
  "context.clip()",
]
`;

exports[`a state with a clipped path > and another one without a clipped path > when the one without is converted (including clipped paths) to the one with clipped paths > should 1`] = `
[
  "context.fillStyle = \\"#000\\"",
  "context.beginPath()",
  "context.fillStyle = \\"#f00\\"",
  "context.moveTo(0,0)",
  "context.lineTo(3,0)",
  "context.lineTo(3,3)",
  "context.lineTo(0,3)",
  "context.lineTo(0,0)",
  "context.closePath()",
  "context.moveTo(0,0)",
  "context.clip()",
]
`;

exports[`a state with a clipped path > that is saved and then changed in two ways, leading to two states > should, when one is converted to the other without clipping paths, result in a change of state in that property alone 1`] = `
[
  "context.fillStyle = \\"#0f0\\"",
]
`;

exports[`a state with a clipped path > that is saved and to which a clipped path is added > and that is then restored and to which another clipped path is added > should result in a state change that contains an additional 'restore' and 'save' 1`] = `
[
  "context.restore()",
  "context.beginPath()",
  "context.moveTo(2,2)",
  "context.clip()",
]
`;

exports[`a state with a clipped path > that is saved and to which a clipped path is added > and that is then restored, saved again and to which another clipped path is added > should result in a state change that contains an additional 'restore' and 'save' 1`] = `
[
  "context.restore()",
  "context.save()",
  "context.beginPath()",
  "context.moveTo(2,2)",
  "context.clip()",
]
`;
